{"version":3,"sources":["components/submitBtn.js","components/fileUpload.js","components/axis.js","components/toggle.js","components/chart.js","components/table.js","components/visualize.js","components/navbar.js","App.js","serviceWorker.js","reducer/reducer.js","index.js"],"names":["CreateSubmit","props","valid","react_default","a","createElement","className","onClick","handleSubmit","FileUpload","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFiles","file","type","reader","FileReader","onload","setState","prevState","csvData","objectSpread","raw","result","dataValid","readAsText","keys","parsed","parseData","asyncToGenerator","regenerator_default","mark","_callee","rowData","colData","wrap","_context","prev","next","state","split","map","data","sent","stop","_callee2","_context2","setData","history","push","react_file_reader_default","fileTypes","multipleFiles","id","submitBtn","Component","connect","dispatch","Axis","listRenderX","index","key","value","listRenderY","x","document","getElementById","y","alterState","Toggle","class","Chart","xData","yData","toggle","getData","_ref","xAxis","yAxis","xVal","yVal","storeData","csvParsedData","forEach","length","arrData","arrIndex","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","_x","_x2","apply","arguments","display","chartDisplay","react_chartjs_2_es","width","height","options","maintainAspectRatio","axis","Table","dist","csvDelimiter","tableClassName","Visualize","chooseFile","table","chart","Navbar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","react_router_dom","navbar","react_router","exact","path","component","Boolean","window","location","hostname","match","initState","undefined","action","store","createStore","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50ac3749.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CreateSubmit = (props) => {\r\n    if(props.valid){\r\n        return (\r\n            <button className=\"btn custom-btn-submit\" onClick={props.handleSubmit}>Submit</button>\r\n        );\r\n    }\r\n    else{\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default CreateSubmit;","import React, { Component } from 'react';\r\nimport ReactFileReader from 'react-file-reader';\r\nimport '../styles/fileUpload.css';\r\nimport { connect } from 'react-redux';\r\nimport CreateSubmit from './submitBtn';\r\n\r\nclass FileUpload extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            csvData: {\r\n                keys: null,\r\n                raw: null,\r\n                parsed: null\r\n            },\r\n            dataValid: false\r\n        };\r\n    }\r\n\r\n    handleFiles = file => {\r\n        if(file[0].type === 'application/vnd.ms-excel'){\r\n            let reader = new FileReader();\r\n\r\n            reader.onload = () => {\r\n                this.setState(prevState => ({\r\n                    csvData: {\r\n                        ...prevState.csvData,\r\n                        raw: reader.result\r\n                    },\r\n                    dataValid: true\r\n                }));\r\n            }\r\n            reader.readAsText(file[0]);\r\n        }\r\n        else{\r\n            this.setState({\r\n                csvData: {\r\n                    keys: null,\r\n                    raw: null,\r\n                    parsed: null\r\n                },\r\n                dataValid: false\r\n            });\r\n        }\r\n    }\r\n\r\n    parseData = async() => {\r\n        let rowData = this.state.csvData.raw.split('\\n');\r\n        \r\n        let colData = await rowData.map(data => {\r\n            return data.split(',');\r\n        });\r\n\r\n        await this.setState(prevState => ({\r\n            ...prevState,\r\n            csvData: {\r\n                ...prevState.csvData,\r\n                keys: colData[0],\r\n                parsed: colData\r\n            }\r\n        }));\r\n    }\r\n\r\n    handleSubmit = async () => {\r\n        await this.parseData();\r\n\r\n        await this.props.setData(this.state.csvData);\r\n\r\n        this.props.history.push('/data-visualize');        \r\n    }\r\n\r\n    render(){\r\n        //console.log(this.state.csvData);\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <div className=\"justify-content-center upload-container\">\r\n                    <h4>Upload File</h4>\r\n                    <div className=\"browse-wrapper border\">\r\n                        <div className=\"browser-wrapper-pad\">\r\n                            <h5>Drag & Drop</h5>\r\n                            <h5>(OR)</h5>\r\n                        <ReactFileReader handleFiles={this.handleFiles} fileTypes={'.csv'} multipleFiles={false}>\r\n                            <button className='btn custom-btn'>Browse File here</button>\r\n                        </ReactFileReader>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"submit-wrapper\" className=\"submit-container\">\r\n                    <CreateSubmit valid={this.state.dataValid} handleSubmit={this.handleSubmit}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setData: (result) => {\r\n            return dispatch(\r\n            {\r\n                type: 'SET_DATA',\r\n                data: result\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(null ,mapDispatchToProps)(FileUpload);","import React from 'react';\r\n\r\nconst Axis = (props) => {\r\n\r\n    const handleClick = () => {\r\n        let x = document.getElementById('xValue').value;\r\n        let y = document.getElementById('yValue').value;\r\n        props.alterState(x,y);\r\n        //console.log(x,y);\r\n        //console.log(props);\r\n    }\r\n\r\n    let listRenderX =  props.keys.map((data,index) => {\r\n        return (\r\n            <option className=\"dropdown-item\" key={index} value={index}>{data}</option>\r\n        );\r\n    });\r\n\r\n    let listRenderY =  props.keys.map((data,index) => {\r\n        return (\r\n            <option className=\"dropdown-item\" key={index} value={index}>{data}</option>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"axis-wrapper\">\r\n            <div onClick={handleClick}><i className=\"fas fa-times\"></i></div>\r\n            <div>\r\n                <select id=\"xValue\" className=\"dropdown\">\r\n                    {listRenderX}\r\n                </select>\r\n            </div>\r\n\r\n            <div>\r\n                <select id=\"yValue\" className=\"dropdown\">\r\n                    {listRenderY}\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Axis;","import React from 'react';\r\n\r\nconst Toggle = (props) => {\r\n    const handleClick = () => {\r\n        props.alterState();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <i class=\"far fa-hand-pointer\" onClick={handleClick}></i>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Toggle;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport Axis from './axis';\r\nimport Toggle from './toggle';\r\n\r\nclass Chart extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            xAxis: null,\r\n            yAxis: null,\r\n            data: {\r\n                labels: null,\r\n                datasets: [],\r\n            },\r\n            toggle: true\r\n        };\r\n\r\n        \r\n    }\r\n\r\n    alterState = (xData,yData) => {\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            toggle: true\r\n            \r\n        }));\r\n    }\r\n\r\n    getData = async(xAxis, yAxis) => {\r\n        let xVal = [], yVal = [];\r\n        await this.props.storeData.csvParsedData.forEach((data,index) => {\r\n            if(index>0 && index<this.props.storeData.csvParsedData.length-1){\r\n                data.forEach((arrData,arrIndex) => {\r\n                    if(arrIndex == xAxis){\r\n                        xVal.push(arrData);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        await this.props.storeData.csvParsedData.forEach((data,index) => {\r\n            if(index>0 && index<this.props.storeData.csvParsedData.length-1){\r\n                data.forEach((arrData,arrIndex) => {\r\n                    if(arrIndex == yAxis){\r\n                        yVal.push(arrData);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            data: {\r\n                ...prevState.data,\r\n                labels: xVal,\r\n                datasets: [\r\n                    {\r\n                        label: 'My First dataset',\r\n                        backgroundColor: 'rgba(255,99,132,0.2)',\r\n                        borderColor: 'rgba(255,99,132,1)',\r\n                        borderWidth: 1,\r\n                        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                        hoverBorderColor: 'rgba(255,99,132,1)',\r\n                        data: yVal\r\n                    }\r\n                ]\r\n            },\r\n            toggle: false\r\n        }));\r\n    }\r\n  \r\n\r\n    render(){\r\n        let display = null;\r\n\r\n        let chartDisplay = (!this.state.toggle) ? (\r\n            <div>\r\n            <Toggle alterState={this.alterState}/>\r\n            <Bar\r\n                    data={this.state.data}\r\n                    width={100}\r\n                    height={100}\r\n                    options={{\r\n                        maintainAspectRatio: true\r\n                    }}\r\n            />\r\n            </div>\r\n        ) : (\r\n            null\r\n        );\r\n\r\n        if(this.state.toggle){\r\n            display = true ? (<Axis keys={this.props.storeData.keys} alterState={this.getData}/>) : null;\r\n        }\r\n        else{\r\n            display = true ? chartDisplay : null;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {display}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        storeData: state\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Chart);","import React,{Component} from 'react';\r\nimport { CsvToHtmlTable } from 'react-csv-to-table';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Table extends Component{\r\n    render() {\r\n        return (\r\n            <CsvToHtmlTable\r\n                data={this.props.storeData.csvData}\r\n                csvDelimiter=\",\"\r\n                tableClassName=\"table table-striped table-hover\"\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        storeData: state\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Table);","import React, { Component } from 'react';\r\nimport '../styles/visualize.css';\r\nimport Chart from './chart';\r\nimport Table from './table';\r\n\r\nclass Visualize extends Component{\r\n\r\n    chooseFile = () => {\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"choose-wrapper\">\r\n                <button className=\"btn custom-btn-choose\" onClick={this.chooseFile}>Choose Another File</button>\r\n                </div>\r\n                <div className=\"row custom-row\">\r\n                    <div className=\"col col-table overflow-auto\">\r\n                    <Table />\r\n                    </div>\r\n                    <div className=\"col col-chart\">\r\n                    <Chart />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Visualize;","import React from 'react';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            Navbar\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                <ul className=\"navbar-nav justify-content-right\">\r\n                <li className=\"nav-item active\">\r\n                Home\r\n                </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\nimport './App.css';\nimport FileUpload from './components/fileUpload';\nimport Visualize from './components/visualize';\nimport Navbar from './components/navbar';\nimport { Route, BrowserRouter } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Route exact path='/' component={FileUpload}/>\n          <Route exact path='/data-visualize' component={Visualize}/>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//initialize redux state\r\nconst initState = {\r\n    csvData: null,\r\n    keys: null,\r\n    csvParsedData: null\r\n}\r\n\r\nfunction setState(state = initState, action){\r\n    switch (action.type) {\r\n        case 'SET_DATA':\r\n            let data = action.data;\r\n            return {\r\n                keys: data.keys,\r\n                csvData: data.raw,\r\n                csvParsedData: data.parsed\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default setState;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport setState  from './reducer/reducer';\n\n//create a redux store\nconst store = createStore(setState); \n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}